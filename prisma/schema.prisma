generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    Int      @unique
  planType  String
  startDate DateTime @default(now())
  endDate   DateTime
  status    String
  user      users    @relation(fields: [userId], references: [id])
}

model CharacterQuota {
  id              String    @id @default(cuid())
  userId          Int       @unique
  permanentQuota  Int       @default(0)    // 永久额度（购买的）
  temporaryQuota  Int       @default(0)    // 临时额度（赠送的和会员计划的）
  usedCharacters  Int       @default(0)
  lastUpdated     DateTime  @default(now())
  quotaExpiry     DateTime? // 临时额度的过期时间
  user            users     @relation(fields: [userId], references: [id])
}

model users {
  id                  Int             @id @default(autoincrement())
  email               String          @unique
  password            String?
  name                String?
  image               String?
  emailVerified       DateTime?
  provider            String?         @db.VarChar(255)
  provider_id         String?         @db.VarChar(255)
  created_at          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?       @default(now()) @db.Timestamptz(6)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  role                String          @default("user")
  status              String          @default("active")
  lastLoginAt         DateTime?
  language            String          @default("zh")
  timezone            String?
  totalCharactersUsed Int             @default(0)
  lastUsedAt          DateTime?
  subscription        Subscription?
  characterQuota      CharacterQuota?
  accounts           Account[]
  sessions           Session[]
}
